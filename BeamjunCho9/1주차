## 인터넷 네트워크
컴퓨터들은 서로 통신 할 때 인터넷을 사용하여 통신 하게 된다. 그런데 인터넷 망은 매우 복잡하다. 그래서 IP(인터넷 프로토콜) 를 사용한다.

## IP (인터넷 프로토콜)
IP 주소를 부여하여 지정한 IP 주소에 데이터를 전달 한다.
패킷(packet) 이라는 통신 단위로 데이터를 전달 한다.
IP 패킷에는 출발지 IP, 도착지 IP, 등등이 들어있다. 패킷들은 이 출발지 IP, 도착지 IP 정보들을 통해서 지정된 IP에 전달 된다.

IP 프로토콜의 한계
1. 비연결성: 도착지가 존재하지 않거나, 받을 수 없는 상황이라도 패킷은 전송 된다. ( 상대방 상태 고려 안하고 그냥 보낸다 )
2. 비신뢰성: 패킷이 중간에 사라지거나 순서대로 도착하지 않는 경우가 생길 수 있다.
3. 프로그램 구분: 한 개의 IP에서 여러 개의 애플리케이션을 사용하는 경우 각 패킷들이 어떤 애플리케이션에 필요한건지 구분 할 수 없다.

## TCP/UDP
애플리케이션 계층에서 메시지가 생성 되면 전송 계층, 인터넷 계층을 거쳐 내려가면서 필요 정보들이 추가된다. 
IP패킷에는 출발지 IP, 도착지 IP가 들어있고, 
TCP패킷에는 출발지 PORT, 도착지 PORT, 전송 제어, 순서, 검증 정보 등 …  들어있다.  여기서 전송 제어, 순서, 검증 정보는 위에서 설명한 IP 프로토콜의 한계(문제) 를 극복할 수 있게 한다.

### TCP의 특징
1. 연결 지향 - TCP 3 way handshake ( IP 프로토콜의 비연결성 문제 해결 )
2. 데이터 전달 보증 ( IP 프로토콜의 비신뢰성 문제 해결 )
3. 순서 보증

TCP 3 way handshake
클라이언트와 서버가 서로 연결이 되었는지 확인이 되면 데이터를 전송한다.
SYN, ACK 를 서로 주고 받으면서 연결 확인한다. 

### UDP의 특징
1. 기능이 거의 없다
2. TCP의 특징에 있는 기능들이 다 없다
3. 단순하고 빠름
4. IP + PORT + Checksum 

## PORT
한 개의 IP에서 여러 개의 애플리케이션을 사용하면 어떤 패킷이 어떤 애플리케이션에 필요한건지 구분이 안되는데 PORT 번호가 구분을 할 수 있게 한다
IP → 아파트 단지
PORT → 동, 호

## DNS( 도메인 네임 시스템 )
도메인 명을 IP 주소로 변환한다.
도메인 서버에 도메인 명과 IP를 등록하여 사용 ( 전화번호 부 느낌 )
클라이언트는 DNS 서버에서 도메인 명에 맞는 IP를 받아와서 해당 IP에 접속하게 된다.

## 번외
UDP는 기능이 거의 없지만 단순하고 빠르기 때문에 실시간 통신( 스포츠 중계, 디스코드 … ), DNS에서 사용된다. 해당 분야들은 delay가 생기면 안되는데 TCP는 여러 기능들이 있어서 UDP보다는 속도가 느리기 때문에 UDP를 사용한다.

노션 링크
https://spotted-oatmeal-52f.notion.site/1-8e6f8c33955c47adae15ba92eadccf66


## URI ( Uniform Resource Identifier )
URI → URL, URN 으로 분류 될 수 있다.
URI가 큰 틀이고 그 안에서 URL, URN으로 나뉜다.
URL ( Uniform  Resource Locator ) : 리소스가 있는 위치 지정
URN ( Uniform  Resource Name ) : 리소스에 이름 부여 
URN은 잘 사용되지 않는다.

### URL 전체 문법
scheme://[userinfo@]host[:port][/path][?query][#fragment]
ex) https://www.google.com:443/search?q=hello&hl=ko
Protocol ( http ), Host ( www.google.com ), Port ( 443 ), Path ( /search ), query parameter ( q=hello&hl=ko )

### scheme
주로 프로토콜 사용 ex) http, https, ftp …

### userinfo
URL에 사용자 정보를 포함해서 인증
거의 사용하지 않는다.

### host
도메인명, IP주소 직접 사용 가능하다.

### port
포트 번호
일반적으로 포트는 생략한다. http는 80 포트, https는 443 포트를 사용한다. 

### path
리소스 경로, 계층적 구조

### query
key = value 형식
? 로 시작하고, &로 추가 가능하다. ex) ?keyA=valueA&keyB=valueB

### fragment
html 내부 북마크 등에 사용, 서버에 전송하는 정보는 아니다.

## 웹 브라우저 요청 흐름
1. 웹 브라우저에 검색을 하게 되면 DNS 서버를 조회해서 IP를 찾아내고, port번호도 찾아낸다. 
2. HTTP 요청 메시지 생성한다.
3. 생성된 메시지를 socket 라이브러리를 통해서 앞에서 찾아낸 IP와 PORT 번호로 TCP/IP 연결( 서버와 연결 ) 을 한다. ( TCP 3 way handshake )
4. 생성된 메시지를 socket 라이브러리를 통해서 TCP/IP 계층에 전달
5. TCP/IP 패킷 생성
6. 인터넷으로 전송

서버는 요청 패킷을 받으면 패킷을 분해하여 HTTP 요청 메시지를 해석한다.
이후 HTTP 응답 메시지를 생성하여 보낸다.

노션 링크
https://spotted-oatmeal-52f.notion.site/2-URI-a82ddaae7f5e4a708abb829533b833b6
